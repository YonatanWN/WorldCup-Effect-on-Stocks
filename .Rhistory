}
getSpyAndGameDataForOneGame(spydata, sampleworldcupgames, 1, 3)
getSpyAndGameDataForOneGame(spydata, sampleworldcupgames, 1, 3)
#Clean SpyData Per Game
getSpyDataWithinRangeofGame = function(spydata,game_date,range){
rangeInSeconds = 60 * 60 * range
print(filter(spydata, (date >= game_date - rangeInSeconds) & (date <= game_date + rangeInSeconds)))
return(filter(spydata, (date >= game_date - rangeInSeconds) & (date <= game_date + rangeInSeconds)))
}
#Clean Spydata Per Worldcup Returns a set of spydata with their corresponding game data
getSpyAndGameDataWithinWorldcup = function(worldcup, spydata, range){
z = getSpyDataWithinRangeofGame(spydata, worldcup[[1,"Datetime"]], range)
gamerow = worldcup[1,]
for(colIndx in 1: ncol(gamerow)){
colvalue = worldcup[[1, colIndx]]
colname = colnames(worldcup)[colIndx]
z[colname] = rep(colvalue, times= nrow(z))
}
z["Time_From_Game"] = (z$date - worldcup[[1,"Datetime"]])
for(gameIndx in 2:nrow(worldcup)){
x = getSpyDataWithinRangeofGame(spydata, worldcup[[gameIndx,"Datetime"]], range)
gamerow = worldcup[gameIndx,]
for(colIndx in 1: ncol(gamerow)){
colvalue = worldcup[[gameIndx, colIndx]]
colname = colnames(worldcup)[colIndx]
x[colname] = rep(colvalue, times= nrow(x))
}
x["Time_From_Game"] = (x$date - x$Datetime)
z = union_all(z,x)
}
return(z)
}
#Gives Spydata and Difference from the game time for each worldcup game
getSpyAndGameDataForOneGame = function(spydata,worldcup, game_index, range){
z = getSpyDataWithinRangeofGame(spydata, worldcup[[game_index,"Datetime"]], range)
for(colIndx in 1: ncol(worldcup[game_index,])){
colvalue = worldcup[[game_index, colIndx]]
colname = colnames(worldcup)[colIndx]
z[colname] = rep(colvalue, times= nrow(z))
}
z["Time_From_Game"] = (z$date - rep(worldcup[[game_index,"Datetime"]], times = nrow(z)))
return(z)
}
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60* 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
#Filter Games that have no corresponding Data
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60* 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
#Filter Games that have no corresponding Data
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, nrow(getSpyDataWithinRangeofGame(spydata, Datetime, 3)) == 0)
#Clean SpyData Per Game
getSpyDataWithinRangeofGame = function(spydata,game_date,range){
print(game_date)
rangeInSeconds = 60 * 60 * range
print(filter(spydata, (date >= game_date - rangeInSeconds) & (date <= game_date + rangeInSeconds)))
return(filter(spydata, (date >= game_date - rangeInSeconds) & (date <= game_date + rangeInSeconds)))
}
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60* 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
#Filter Games that have no corresponding Data
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, nrow(getSpyDataWithinRangeofGame(spydata, Datetime, 3)) == 0)
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60* 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
#Filter Games that have no corresponding Data
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, nrow(getSpyDataWithinRangeofGame(spydata, Datetime, 3)) != 0)
cleaned_worldcupmatches
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60* 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
#Filter Games that have no corresponding Data
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, nrow(getSpyDataWithinRangeofGame(spydata, Datetime, 3)) == 0)
cleaned_worldcupmatches
samplesize = 10
worldcupmatches2014 = filter(cleaned_worldcupmatches, Year == 2014)
sampleworldcupgames = sample_n(worldcupmatches2014,size = samplesize)
samplesize = 10
worldcupmatches2014 = filter(cleaned_worldcupmatches, Year == 2014)
worldcupmatches2014
sampleworldcupgames = sample_n(worldcupmatches2014,size = samplesize)
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60* 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
#Filter Games that have no corresponding Data
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, nrow(getSpyDataWithinRangeofGame(spydata, Datetime, 3)) != 0)
cleaned_worldcupmatches
library(tidyverse)
library(dplyr)
library(MASS)
library(lubridate)
library(stringr)
spydata = as_tibble(read.csv("1_min_SPY_2008-2021.csv"))
worldcupmatches = as_tibble(read.csv("WorldCupMatches.csv"))
spydata$date = as.POSIXct(spydata$date, format="%Y%m%d %H:%M:%S")
#Clean SpyData Per Game
getSpyDataWithinRangeofGame = function(spydata,game_date,range){
print(game_date)
rangeInSeconds = 60 * 60 * range
print(filter(spydata, (date >= game_date - rangeInSeconds) & (date <= game_date + rangeInSeconds)))
return(filter(spydata, (date >= game_date - rangeInSeconds) & (date <= game_date + rangeInSeconds)))
}
#Clean Spydata Per Worldcup Returns a set of spydata with their corresponding game data
getSpyAndGameDataWithinWorldcup = function(worldcup, spydata, range){
z = getSpyDataWithinRangeofGame(spydata, worldcup[[1,"Datetime"]], range)
gamerow = worldcup[1,]
for(colIndx in 1: ncol(gamerow)){
colvalue = worldcup[[1, colIndx]]
colname = colnames(worldcup)[colIndx]
z[colname] = rep(colvalue, times= nrow(z))
}
z["Time_From_Game"] = (z$date - worldcup[[1,"Datetime"]])
for(gameIndx in 2:nrow(worldcup)){
x = getSpyDataWithinRangeofGame(spydata, worldcup[[gameIndx,"Datetime"]], range)
gamerow = worldcup[gameIndx,]
for(colIndx in 1: ncol(gamerow)){
colvalue = worldcup[[gameIndx, colIndx]]
colname = colnames(worldcup)[colIndx]
x[colname] = rep(colvalue, times= nrow(x))
}
x["Time_From_Game"] = (x$date - x$Datetime)
z = union_all(z,x)
}
return(z)
}
#Gives Spydata and Difference from the game time for each worldcup game
getSpyAndGameDataForOneGame = function(spydata,worldcup, game_index, range){
z = getSpyDataWithinRangeofGame(spydata, worldcup[[game_index,"Datetime"]], range)
for(colIndx in 1: ncol(worldcup[game_index,])){
colvalue = worldcup[[game_index, colIndx]]
colname = colnames(worldcup)[colIndx]
z[colname] = rep(colvalue, times= nrow(z))
}
z["Time_From_Game"] = (z$date - rep(worldcup[[game_index,"Datetime"]], times = nrow(z)))
return(z)
}
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60* 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
#Filter Games that have no corresponding Data
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, nrow(getSpyDataWithinRangeofGame(spydata, Datetime, 3)) != 0)
cleaned_worldcupmatches
samplesize = 10
worldcupmatches2014 = filter(cleaned_worldcupmatches, Year == 2014)
sampleworldcupgames = sample_n(worldcupmatches2014,size = samplesize)
print(sampleworldcupgames)
getSpyAndGameDataForOneGame(spydata, sampleworldcupgames, 1, 3)
for(rowIndx in 1:samplesize){
print(getSpyAndGameDataForOneGame(spydata, sampleworldcupgames, rowIndx, 3))
}
getSpyAndGameDataForOneGame(spydata, sampleworldcupgames, 1, 3)
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60 * 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
#Filter Games that have no corresponding Data
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, nrow(getSpyDataWithinRangeofGame(spydata, Datetime, 3)) != 0)
cleaned_worldcupmatches
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60 * 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
#Filter Games that have no corresponding Data
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, nrow(getSpyDataWithinRangeofGame(spydata, Datetime, 3)) != 0)
cleaned_worldcupmatches
library(tidyverse)
library(dplyr)
library(MASS)
library(lubridate)
library(stringr)
spydata = as_tibble(read.csv("1_min_SPY_2008-2021.csv"))
worldcupmatches = as_tibble(read.csv("WorldCupMatches.csv"))
spydata$date = as.POSIXct(spydata$date, format="%Y%m%d %H:%M:%S")
#Clean SpyData Per Game
getSpyDataWithinRangeofGame = function(spydata,game_date,range){
rangeInSeconds = 60 * 60 * range
return(filter(spydata, (date >= game_date - rangeInSeconds) & (date <= game_date + rangeInSeconds)))
}
#Clean Spydata Per Worldcup Returns a set of spydata with their corresponding game data
getSpyAndGameDataWithinWorldcup = function(worldcup, spydata, range){
z = getSpyDataWithinRangeofGame(spydata, worldcup[[1,"Datetime"]], range)
gamerow = worldcup[1,]
for(colIndx in 1: ncol(gamerow)){
colvalue = worldcup[[1, colIndx]]
colname = colnames(worldcup)[colIndx]
z[colname] = rep(colvalue, times= nrow(z))
}
z["Time_From_Game"] = (z$date - worldcup[[1,"Datetime"]])
for(gameIndx in 2:nrow(worldcup)){
x = getSpyDataWithinRangeofGame(spydata, worldcup[[gameIndx,"Datetime"]], range)
gamerow = worldcup[gameIndx,]
for(colIndx in 1: ncol(gamerow)){
colvalue = worldcup[[gameIndx, colIndx]]
colname = colnames(worldcup)[colIndx]
x[colname] = rep(colvalue, times= nrow(x))
}
x["Time_From_Game"] = (x$date - x$Datetime)
z = union_all(z,x)
}
return(z)
}
#Gives Spydata and Difference from the game time for each worldcup game
getSpyAndGameDataForOneGame = function(spydata,worldcup, game_index, range){
z = getSpyDataWithinRangeofGame(spydata, worldcup[[game_index,"Datetime"]], range)
for(colIndx in 1: ncol(worldcup[game_index,])){
colvalue = worldcup[[game_index, colIndx]]
colname = colnames(worldcup)[colIndx]
z[colname] = rep(colvalue, times= nrow(z))
}
z["Time_From_Game"] = (z$date - rep(worldcup[[game_index,"Datetime"]], times = nrow(z)))
return(z)
}
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60 * 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
#Filter Games that have no corresponding Data
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, nrow(getSpyDataWithinRangeofGame(spydata, Datetime, 3)) != 0)
cleaned_worldcupmatches
samplesize = 10
worldcupmatches2014 = filter(cleaned_worldcupmatches, Year == 2014)
sampleworldcupgames = sample_n(worldcupmatches2014,size = samplesize)
print(sampleworldcupgames)
getSpyAndGameDataForOneGame(spydata, sampleworldcupgames, 1, 3)
for(rowIndx in 1:samplesize){
print(getSpyAndGameDataForOneGame(spydata, sampleworldcupgames, rowIndx, 3))
}
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60 * 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
cleaned_worldcupmatches
#Filter Games that have no corresponding Data
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, nrow(getSpyDataWithinRangeofGame(spydata, Datetime, 3)) != 0)
cleaned_worldcupmatches
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60 * 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
cleaned_worldcupmatches
#Filter Games that have no corresponding Data
print(nrow(getSpyDataWithinRangeofGame(spydata, cleaned_worldcupmatches$Datetime, 3)) != 0)
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, )
cleaned_worldcupmatches
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60 * 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
cleaned_worldcupmatches
#Filter Games that have no corresponding Data
print(nrow(getSpyDataWithinRangeofGame(spydata, cleaned_worldcupmatches$Datetime, 3)) != 0)
cleaned_worldcupmatches
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60 * 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
#Filter Games that have no corresponding Data
print(nrow(getSpyDataWithinRangeofGame(spydata, cleaned_worldcupmatches$Datetime, 3)) != 0)
cleaned_worldcupmatches
?filter
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60 * 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
for(i in 1:nrow(cleaned_worldcupmatches)){
print(nrow(getSpyDataWithinRangeofGame(spydata, cleaned_worldcupmatches[i,]$Datetime, 3)) != 0)
}
#Filter Games that have no corresponding Data
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60 * 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
for(i in 1:nrow(cleaned_worldcupmatches)){
cleaned_worldcupmatches[i]["Has_Spy_Data"] = nrow(getSpyDataWithinRangeofGame(spydata, cleaned_worldcupmatches[i,]$Datetime, 3)) != 0
}
hasSpyDataWithinRangOfGame(spydata, game_dates, range){
hasSpyDataWithinRangOfGame(spydata, game_dates, range){
hasSpyDataWithinRangOfGame = function(spydata, game_dates, range){
list = c()
for(game_date in 1:nrow(game_dates)){
append(list, nrow(getSpyDataWithinRangeofGame(spydata, game_date = game_dates[[game_date]], range)) != 0)
}
return(list)
}
hasSpyDataWithinRangeOfGame = function(spydata, game_dates, range){
list = c()
for(game_date in 1:nrow(game_dates)){
append(list, nrow(getSpyDataWithinRangeofGame(spydata, game_date = game_dates[[game_date]], range)) != 0)
}
return(list)
}
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60 * 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
#Filter Games that have no corresponding Data
cleaned_worldcupmatches["Has_Spy_Data"] = hasSpyDataWithinRangeOfGame(spydata, cleaned_worldcupmatches$Datetime, 5)
library(tidyverse)
library(dplyr)
library(MASS)
library(lubridate)
library(stringr)
spydata = as_tibble(read.csv("1_min_SPY_2008-2021.csv"))
worldcupmatches = as_tibble(read.csv("WorldCupMatches.csv"))
spydata$date = as.POSIXct(spydata$date, format="%Y%m%d %H:%M:%S")
hasSpyDataWithinRangeOfGame = function(spydata, game_dates, range){
list = c()
for(game_date in 1:nrow(game_dates)){
append(list, nrow(getSpyDataWithinRangeofGame(spydata, game_date = game_dates[[game_date]], range)) != 0)
}
return(list)
}
#Clean SpyData Per Game
getSpyDataWithinRangeofGame = function(spydata,game_date,range){
rangeInSeconds = 60 * 60 * range
return(filter(spydata, (date >= game_date - rangeInSeconds) & (date <= game_date + rangeInSeconds)))
}
#Clean Spydata Per Worldcup Returns a set of spydata with their corresponding game data
getSpyAndGameDataWithinWorldcup = function(worldcup, spydata, range){
z = getSpyDataWithinRangeofGame(spydata, worldcup[[1,"Datetime"]], range)
gamerow = worldcup[1,]
for(colIndx in 1: ncol(gamerow)){
colvalue = worldcup[[1, colIndx]]
colname = colnames(worldcup)[colIndx]
z[colname] = rep(colvalue, times= nrow(z))
}
z["Time_From_Game"] = (z$date - worldcup[[1,"Datetime"]])
for(gameIndx in 2:nrow(worldcup)){
x = getSpyDataWithinRangeofGame(spydata, worldcup[[gameIndx,"Datetime"]], range)
gamerow = worldcup[gameIndx,]
for(colIndx in 1: ncol(gamerow)){
colvalue = worldcup[[gameIndx, colIndx]]
colname = colnames(worldcup)[colIndx]
x[colname] = rep(colvalue, times= nrow(x))
}
x["Time_From_Game"] = (x$date - x$Datetime)
z = union_all(z,x)
}
return(z)
}
#Gives Spydata and Difference from the game time for each worldcup game
getSpyAndGameDataForOneGame = function(spydata,worldcup, game_index, range){
z = getSpyDataWithinRangeofGame(spydata, worldcup[[game_index,"Datetime"]], range)
for(colIndx in 1: ncol(worldcup[game_index,])){
colvalue = worldcup[[game_index, colIndx]]
colname = colnames(worldcup)[colIndx]
z[colname] = rep(colvalue, times= nrow(z))
}
z["Time_From_Game"] = (z$date - rep(worldcup[[game_index,"Datetime"]], times = nrow(z)))
return(z)
}
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60 * 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
#Filter Games that have no corresponding Data
cleaned_worldcupmatches["Has_Spy_Data"] = hasSpyDataWithinRangeOfGame(spydata, cleaned_worldcupmatches$Datetime, 5)
hasSpyDataWithinRangeOfGame = function(spydata, game_dates, range){
print(game_dates)
list = c()
for(game_date in 1:nrow(game_dates)){
append(list, nrow(getSpyDataWithinRangeofGame(spydata, game_date = game_dates[game_date], range)) != 0)
}
return(list)
}
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60 * 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
#Filter Games that have no corresponding Data
cleaned_worldcupmatches["Has_Spy_Data"] = hasSpyDataWithinRangeOfGame(spydata, cleaned_worldcupmatches$Datetime, 5)
hasSpyDataWithinRangeOfGame = function(spydata, game_dates, range){
print(game_dates)
list = c()
for(game_date in 1:length(game_dates)){
append(list, nrow(getSpyDataWithinRangeofGame(spydata, game_date = game_dates[game_date], range)) != 0)
}
return(list)
}
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60 * 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
#Filter Games that have no corresponding Data
cleaned_worldcupmatches["Has_Spy_Data"] = hasSpyDataWithinRangeOfGame(spydata, cleaned_worldcupmatches$Datetime, 5)
library(tidyverse)
library(dplyr)
library(MASS)
library(lubridate)
library(stringr)
spydata = as_tibble(read.csv("1_min_SPY_2008-2021.csv"))
worldcupmatches = as_tibble(read.csv("WorldCupMatches.csv"))
spydata$date = as.POSIXct(spydata$date, format="%Y%m%d %H:%M:%S")
hasSpyDataWithinRangeOfGame = function(spydata, game_dates, range){
list = c()
for(game_date in 1:length(game_dates)){
append(list, nrow(getSpyDataWithinRangeofGame(spydata, game_date = game_dates[game_date], range)) != 0)
}
return(list)
}
#Clean SpyData Per Game
getSpyDataWithinRangeofGame = function(spydata,game_date,range){
rangeInSeconds = 60 * 60 * range
return(filter(spydata, (date >= game_date - rangeInSeconds) & (date <= game_date + rangeInSeconds)))
}
#Clean Spydata Per Worldcup Returns a set of spydata with their corresponding game data
getSpyAndGameDataWithinWorldcup = function(worldcup, spydata, range){
z = getSpyDataWithinRangeofGame(spydata, worldcup[[1,"Datetime"]], range)
gamerow = worldcup[1,]
for(colIndx in 1: ncol(gamerow)){
colvalue = worldcup[[1, colIndx]]
colname = colnames(worldcup)[colIndx]
z[colname] = rep(colvalue, times= nrow(z))
}
z["Time_From_Game"] = (z$date - worldcup[[1,"Datetime"]])
for(gameIndx in 2:nrow(worldcup)){
x = getSpyDataWithinRangeofGame(spydata, worldcup[[gameIndx,"Datetime"]], range)
gamerow = worldcup[gameIndx,]
for(colIndx in 1: ncol(gamerow)){
colvalue = worldcup[[gameIndx, colIndx]]
colname = colnames(worldcup)[colIndx]
x[colname] = rep(colvalue, times= nrow(x))
}
x["Time_From_Game"] = (x$date - x$Datetime)
z = union_all(z,x)
}
return(z)
}
#Gives Spydata and Difference from the game time for each worldcup game
getSpyAndGameDataForOneGame = function(spydata,worldcup, game_index, range){
z = getSpyDataWithinRangeofGame(spydata, worldcup[[game_index,"Datetime"]], range)
for(colIndx in 1: ncol(worldcup[game_index,])){
colvalue = worldcup[[game_index, colIndx]]
colname = colnames(worldcup)[colIndx]
z[colname] = rep(colvalue, times= nrow(z))
}
z["Time_From_Game"] = (z$date - rep(worldcup[[game_index,"Datetime"]], times = nrow(z)))
return(z)
}
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60 * 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
#Filter Games that have no corresponding Data
cleaned_worldcupmatches["Has_Spy_Data"] = hasSpyDataWithinRangeOfGame(spydata, cleaned_worldcupmatches$Datetime, 5)
samplesize = 10
worldcupmatches2014 = filter(cleaned_worldcupmatches, Year == 2014)
sampleworldcupgames = sample_n(worldcupmatches2014,size = samplesize)
print(sampleworldcupgames)
getSpyAndGameDataForOneGame(spydata, sampleworldcupgames, 1, 3)
for(rowIndx in 1:samplesize){
print(getSpyAndGameDataForOneGame(spydata, sampleworldcupgames, rowIndx, 3))
}
#Remove Rows containing NA's
cleaned_worldcupmatches = unique(worldcupmatches[!apply(is.na(worldcupmatches) | worldcupmatches == "", 1, all),])
#Convert Date and Time into POSIX EDT
cleaned_worldcupmatches$Datetime = as.POSIXct(cleaned_worldcupmatches$Datetime, format = "%e %b %Y - %R") - 60 * 60
#Filter Games on the Weekend
cleaned_worldcupmatches = filter(cleaned_worldcupmatches, wday(as.Date(Datetime)) != 7 & wday(as.Date(Datetime)) != 1)
#Filter Games that have no corresponding Data
cleaned_worldcupmatches["Has_Spy_Data"] = hasSpyDataWithinRangeOfGame(spydata, cleaned_worldcupmatches$Datetime, 5)
